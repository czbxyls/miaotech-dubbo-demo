# Nacos帮助文档: https://nacos.io/zh-cn/docs/concepts.html
# Nacos认证信息
spring.application.name=miaotech-provider

spring.cloud.nacos.config.username=nacos
spring.cloud.nacos.config.password=nacos
spring.cloud.nacos.config.contextPath=/nacos
## 设置配置中心服务端地址
spring.cloud.nacos.config.server-addr=localhost:8848
# Nacos 配置中心的namespace。需要注意，如果使用 public 的 namcespace ，请不要填写这个值，直接留空即可
spring.cloud.nacos.config.namespace=
#在nacos配置中心的DataID
spring.cloud.nacos.config.prefix=miaotech

# sentinel 配置
spring.cloud.sentinel.transport.port=8720
spring.cloud.sentinel.transport.dashboard=localhost:8088

# https://blog.csdn.net/weixin_42211601/article/details/113062732
# nacos的访问地址
spring.cloud.sentinel.datasource.flow.nacos.server-addr=localhost:8848
spring.cloud.sentinel.datasource.flow.nacos.username=nacos
spring.cloud.sentinel.datasource.flow.nacos.password=nacos
#nacos中存储规则的dataId,对于dataId使用了${spring.application.name}变量，这样可以根据应用名来区分不同的规则配置
spring.cloud.sentinel.datasource.flow.nacos.dataId=${spring.application.name}-flow-rules
spring.cloud.sentinel.datasource.flow.nacos.namespace=
spring.cloud.sentinel.datasource.flow.nacos.groupId=SENTINEL_GROUP
spring.cloud.sentinel.datasource.flow.nacos.rule-type=flow


# 参考：https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/rocketmq-example/readme-zh.md
# 配置rocketmq的nameserver地址
spring.cloud.stream.rocketmq.binder.name-server=127.0.0.1:9876
#定义日志业务
server.biz.notify.prefix=notify
#定义业务收藏业务
server.biz.collect.prefix=collect

# 定义name为notifyOutput的binding。用于记录日志、通知等
#消息主题，通过Topic对不同的业务消息进行分类
spring.cloud.stream.bindings.notifyOutput.destination=${server.biz.notify.prefix}-topic
spring.cloud.stream.bindings.notifyOutput.content-type=application/json
# RocketMQ的group代表具有相同角色的生产者组合或消费者组合，称为生产者组或消费者组。
spring.cloud.stream.rocketmq.bindings.notifyOutput.producer.group=miaotech-producer-${server.biz.notify.prefix}-group
spring.cloud.stream.rocketmq.bindings.notifyOutput.producer.sync=true

# 定义name为collectOutput的binding。用于收集
spring.cloud.stream.bindings.collectOutput.destination=${server.biz.collect.prefix}-topic
spring.cloud.stream.bindings.collectOutput.content-type=application/json
spring.cloud.stream.rocketmq.bindings.collectOutput.producer.group=miaotech-producer-${server.biz.collect.prefix}-group
spring.cloud.stream.rocketmq.bindings.collectOutput.producer.sync=true

# 定义name为notifyInput的binding。用于记录日志
# notifyInput: 订阅 topic 为 test-topic 的消息，顺序消费所有消息(顺序消费的前提是所有消息都在一个 MessageQueue 中)
spring.cloud.stream.bindings.notifyInput.destination=${server.biz.notify.prefix}-topic
spring.cloud.stream.bindings.notifyInput.content-type=text/plain
spring.cloud.stream.bindings.notifyInput.group=miaotech-consumer-${server.biz.notify.prefix}-group
spring.cloud.stream.rocketmq.bindings.notifyInput.consumer.orderly=true

# 定义name为collectInput的binding。用于处理收藏，如下载网页等
#collectInput: 订阅 topic 为 test-topic 的消息，异步消费 tags 为 tagStr 的消息，Consumer 端线程池个数为4
spring.cloud.stream.bindings.collectInput.destination=${server.biz.collect.prefix}-topic
spring.cloud.stream.bindings.collectInput.content-type=text/plain
spring.cloud.stream.bindings.collectInput.group=miaotech-consumer-${server.biz.collect.prefix}-group
spring.cloud.stream.rocketmq.bindings.collectInput.consumer.orderly=false
#只有rocketmq才支持tag
#spring.cloud.stream.rocketmq.bindings.collectInput.consumer.tags=tagStr
spring.cloud.stream.bindings.collectInput.consumer.concurrency=4




